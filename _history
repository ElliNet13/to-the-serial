{"entries":[{"timestamp":1752969675280,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2151,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":672,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":29,"diffs":[[1,"    \"name\": \"Light Switch\",\n"]]},{"start1":235,"length1":35,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1752971190445,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2147,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"266\" y=\"-13\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">B</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"55\" y=\"52\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"169\" y=\"141\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A+B</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"510\" y=\"135\"></block><block type=\"input_logo_event\" x=\"1003\" y=\"229\"><field name=\"action\">TouchButtonEvent.LongPressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logolongpress</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"43\" y=\"329\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"></block></statement></block><block type=\"input_logo_event\" x=\"938\" y=\"520\"><field name=\"action\">TouchButtonEvent.Released</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logorelease</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"315\" y=\"609\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logopress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"690\" y=\"628\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logotouch</field></shadow></value></block></statement></block></xml>"]]}]}]},{"timestamp":1753019853422,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":521,"length1":80,"diffs":[[1,""]]}]}]},{"timestamp":1753019863557,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2252,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"211\" y=\"-65\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">B</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"114\" y=\"89\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A+B</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"455\" y=\"83\"></block><block type=\"input_logo_event\" x=\"948\" y=\"177\"><field name=\"action\">TouchButtonEvent.LongPressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logolongpress</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"-12\" y=\"277\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"></block></statement></block><block type=\"input_logo_event\" x=\"883\" y=\"468\"><field name=\"action\">TouchButtonEvent.Released</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logorelease</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"260\" y=\"557\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logopress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"635\" y=\"576\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logotouch</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":82,"diffs":[[1,"input.onLogoEvent(TouchButtonEvent.LongPressed, function () {\n"]]},{"start1":103,"length1":65,"diffs":[[1,"input.onButtonPressed(Button.A, function () {\n"]]},{"start1":178,"length1":67,"diffs":[[1,"input.onButtonPressed(Button.AB, function () {\n"]]},{"start1":256,"length1":65,"diffs":[[1,"input.onButtonPressed(Button.B, function () {\n"]]},{"start1":331,"length1":73,"diffs":[[1,"input.onLogoEvent(TouchButtonEvent.Touched, function () {\n"]]},{"start1":426,"length1":73,"diffs":[[1,"input.onLogoEvent(TouchButtonEvent.Pressed, function () {\n"]]},{"start1":521,"length1":75,"diffs":[[1,"serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n\t\n})\ninput.onLogoEvent(TouchButtonEvent.Released, function () {\n"]]},{"start1":699,"length1":845,"diffs":[[1,""]]},{"start1":719,"length1":43,"diffs":[[1,"basic.forever(function () {\n\t\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":209,"length1":39,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":236,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"added","filename":"main.py","value":"def on_logo_long_pressed():\n    serial.write_line(\"logolongpress\")\ninput.on_logo_event(TouchButtonEvent.LONG_PRESSED, on_logo_long_pressed)\n\ndef on_button_pressed_a():\n    serial.write_line(\"A\")\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_ab():\n    serial.write_line(\"A+B\")\ninput.on_button_pressed(Button.AB, on_button_pressed_ab)\n\ndef on_button_pressed_b():\n    serial.write_line(\"B\")\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_logo_touched():\n    serial.write_line(\"logotouch\")\ninput.on_logo_event(TouchButtonEvent.TOUCHED, on_logo_touched)\n\ndef on_logo_pressed():\n    serial.write_line(\"logopress\")\ninput.on_logo_event(TouchButtonEvent.PRESSED, on_logo_pressed)\n\ndef on_logo_released():\n    serial.write_line(\"logorelease\")\ninput.on_logo_event(TouchButtonEvent.RELEASED, on_logo_released)\n\ndef on_data_received():\n    line = serial.read_until(serial.delimiters(Delimiters.NEW_LINE)).strip()\n    parts = line.split(\" \")\n\n    if parts[0] == \"PLOT\" and len(parts) == 3:\n        try:\n            x = int(parts[1])\n            y = int(parts[2])\n            if 0 <= x <= 4 and 0 <= y <= 4:\n                led.plot(x, y)\n            else:\n                serial.write_line(\"Invalid coordinates\")\n        except:\n            serial.write_line(\"Invalid number format\")\n    \n    elif parts[0] == \"CLEAR\":\n        basic.clear_screen()\n    \n    else:\n        serial.write_line(\"Unknown command: \" + line)\n\nserial.on_data_received(serial.delimiters(Delimiters.NEW_LINE), on_data_received)\n\nbasic.clear_screen()\n\ndef on_forever():\n    pass\nbasic.forever(on_forever)\n"}]},{"timestamp":1753020387159,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":871,"length1":140,"diffs":[[1,"    line = serial.read_until(serial.delimiters(Delimiters.NEW_LINE)).strip()\n"]]},{"start1":976,"length1":5,"diffs":[[1,"\n"]]},{"start1":1172,"length1":54,"diffs":[[1,""]]},{"start1":1318,"length1":0,"diffs":[[1,"    \n"]]},{"start1":1382,"length1":44,"diffs":[[1,"    \n"]]},{"start1":1452,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1753021287679,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":872,"length1":154,"diffs":[[1,"    let line = _py.py_string_strip(serial.readUntil(serial.delimiters(Delimiters.NewLine)))\n"]]},{"start1":1235,"length1":52,"diffs":[[1,""]]},{"start1":1508,"length1":43,"diffs":[[1,""]]}]}]},{"timestamp":1753021287779,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1607,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1753021314715,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1711,"length1":16,"diffs":[[1,""]]}]}]},{"timestamp":1753023085809,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1765,"length1":16,"diffs":[[1,""]]}]}]},{"timestamp":1753023085894,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":971,"length1":0,"diffs":[[1,"    serial.writeLine(\"DEBUG received: '\" + line + \"'\")\n"]]},{"start1":1297,"length1":0,"diffs":[[1,"                serial.writeLine(\"Plotted {x},{y}\")\n"]]},{"start1":1370,"length1":158,"diffs":[[1,"                serial.writeLine(\"Invalid coordinates\")\n"]]},{"start1":1483,"length1":105,"diffs":[[1,"            serial.writeLine(\"Invalid number format\")\n"]]},{"start1":1556,"length1":59,"diffs":[[1,"    } else if (parts[0] == \"CLEAR\") {\n"]]},{"start1":1622,"length1":103,"diffs":[[1,"        serial.writeLine(\"Screen cleared\")\n"]]},{"start1":1678,"length1":98,"diffs":[[1,"        serial.writeLine(\"Unknown command: \" + line)\n"]]},{"start1":1765,"length1":0,"diffs":[[1,"control.reset()\n"]]},{"start1":1827,"length1":207,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":955,"length1":0,"diffs":[[1,"    serial.write_line(\"DEBUG received: '\" + line + \"'\")\n"]]},{"start1":1039,"length1":1,"diffs":[[1,"    \n"]]},{"start1":1239,"length1":46,"diffs":[[1,"                serial.write_line(f\"Plotted {x},{y}\")\n"]]},{"start1":1311,"length1":112,"diffs":[[1,"                serial.write_line(\"Invalid coordinates\")\n"]]},{"start1":1384,"length1":157,"diffs":[[1,"            serial.write_line(\"Invalid number format\")\n    elif parts[0] == \"CLEAR\":\n"]]},{"start1":1498,"length1":97,"diffs":[[1,"        serial.write_line(\"Screen cleared\")\n"]]},{"start1":1552,"length1":100,"diffs":[[1,"        serial.write_line(\"Unknown command: \" + line)\n"]]},{"start1":1711,"length1":0,"diffs":[[1,"control.reset()\n"]]},{"start1":1781,"length1":152,"diffs":[[1,""]]}]}]},{"timestamp":1753023683692,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1747,"length1":28,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1607,"length1":29,"diffs":[[1,""]]}]}]},{"timestamp":1753023938502,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1917,"length1":5,"diffs":[[1,"    pass\n"]]}]}]},{"timestamp":1753034167191,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1922,"length1":27,"diffs":[[1,""]]}]}]},{"timestamp":1753034255661,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2003,"length1":83,"diffs":[[1,"    \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1917,"length1":86,"diffs":[[1,"    \n    control.wait_micros(4)\n"]]}]}]},{"timestamp":1753034295364,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1917,"length1":34,"diffs":[[1,"    control.wait_micros(1000000)\n"]]}]}]},{"timestamp":1753039105976,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2003,"length1":33,"diffs":[[1,"    control.waitMicros(1000000)\n"]]}]}]},{"timestamp":1753039106087,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2003,"length1":0,"diffs":[[1,"    control.waitMicros(10000000)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1917,"length1":0,"diffs":[[1,"    control.wait_micros(10000000)\n"]]}]}]},{"timestamp":1753039659845,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2003,"length1":22,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1917,"length1":22,"diffs":[[1,""]]}]}]},{"timestamp":1753039779566,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1607,"length1":131,"diffs":[[1,"        basic.clear_screen()\n"]]}]}]},{"timestamp":1753106004594,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1607,"length1":112,"diffs":[[1,"        basic.clear_screen()music.play(music.tone_playable(Note.C, music.beat(BeatFraction.WHOLE)), music.PlaybackMode.UNTIL_DONE)\n"]]}]}]},{"timestamp":1753106013375,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1689,"length1":175,"diffs":[[1,"    } else if (parts[0] == \"TEXT\" && parts.length >= 2) {\n        basic.clearScreen()\n        basic.showString(extract_text(line))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":255,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"pyprj\"\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1607,"length1":111,"diffs":[[1,"        )music.play(music.tone_playable(Note.C, music.beat(BeatFraction.WHOLE)), music.PlaybackMode.UNTIL_DONE)\n        basic.show_string(extract_text(line))\n"]]}]}]},{"timestamp":1753106352853,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":29,"diffs":[[1,"    \"name\": \"To the seriel\",\n"]]}]}]},{"timestamp":1753127632998,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1689,"length1":0,"diffs":[[1,"    } else if (parts[0] == \"TONE\" && parts.length >= 2) {\n        music.play(music.tonePlayable(Note[parts[1]], music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n"]]}]}]},{"timestamp":1753127650973,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":187,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"9)iJD!3#Db2|rl29](ch\">parts</variable><variable id=\"d4bEZKjSa=j?Z3)A+=%X\">line</variable></variables><block type=\"device_button_event\" x=\"183\" y=\"-45\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">B</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"455\" y=\"-32\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"></block></statement></block><block type=\"device_button_event\" x=\"741\" y=\"-32\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A+B</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"-36\" y=\"141\"></block><block type=\"input_logo_event\" x=\"169\" y=\"141\"><field name=\"action\">TouchButtonEvent.LongPressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logolongpress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"555\" y=\"141\"><field name=\"action\">TouchButtonEvent.Released</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logorelease</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"-36\" y=\"314\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logopress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"315\" y=\"314\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logotouch</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":255,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1752969675279,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Light Switch\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1753039105976,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"9)iJD!3#Db2|rl29](ch\">parts</variable><variable id=\"d4bEZKjSa=j?Z3)A+=%X\">line</variable></variables><block type=\"device_button_event\" x=\"183\" y=\"-45\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">B</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"455\" y=\"-32\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"></block></statement></block><block type=\"device_button_event\" x=\"741\" y=\"-32\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A+B</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"-36\" y=\"141\"></block><block type=\"input_logo_event\" x=\"169\" y=\"141\"><field name=\"action\">TouchButtonEvent.LongPressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logolongpress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"555\" y=\"141\"><field name=\"action\">TouchButtonEvent.Released</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logorelease</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"-36\" y=\"314\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logopress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"315\" y=\"314\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logotouch</field></shadow></value></block></statement></block></xml>","main.ts":"","README.md":"","main.py":"def on_logo_long_pressed():\n    serial.write_line(\"logolongpress\")\ninput.on_logo_event(TouchButtonEvent.LONG_PRESSED, on_logo_long_pressed)\n\ndef on_button_pressed_a():\n    serial.write_line(\"A\")\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_ab():\n    serial.write_line(\"A+B\")\ninput.on_button_pressed(Button.AB, on_button_pressed_ab)\n\ndef on_button_pressed_b():\n    serial.write_line(\"B\")\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_logo_touched():\n    serial.write_line(\"logotouch\")\ninput.on_logo_event(TouchButtonEvent.TOUCHED, on_logo_touched)\n\ndef on_logo_pressed():\n    serial.write_line(\"logopress\")\ninput.on_logo_event(TouchButtonEvent.PRESSED, on_logo_pressed)\n\ndef on_logo_released():\n    serial.write_line(\"logorelease\")\ninput.on_logo_event(TouchButtonEvent.RELEASED, on_logo_released)\n\ndef on_data_received():\n    line = serial.read_until(serial.delimiters(Delimiters.CARRIAGE_RETURN)).strip()\n    parts = line.split(\" \")\n\n    if parts[0] == \"PLOT\" and len(parts) == 3:\n        try:\n            x = int(parts[1])\n            y = int(parts[2])\n            if 0 <= x <= 4 and 0 <= y <= 4:\n                led.plot(x, y)\n                # no debug message on success\n            else:\n                serial.write_line(f\"Error: Coordinates out of range ({x},{y})\")\n                control.reset()\n        except:\n            serial.write_line(\"Error: Invalid number format in PLOT command\")\n            control.reset()\n\n    elif parts[0] == \"CLEAR\" and len(parts) == 1:\n        basic.clear_screen()\n\n    elif parts[0] == \"TEXT\" and len(parts) >= 2:\n        basic.clear_screen()\n        basic.show_string(extract_text(line))\n\n    else:\n        serial.write_line(f\"Error: Unknown or malformed command: '{line}'\")\n        control.reset()\n\nserial.on_data_received(serial.delimiters(Delimiters.NEW_LINE), on_data_received)\n\nbasic.clear_screen()\n\ndef on_forever():\n    control.wait_micros(1000000)\n    serial.write_value(\"temp\", input.temperature())\n\nbasic.forever(on_forever)\n\ndef extract_text(line: str) -> str:\n    prefix = \"TEXT \"\n    if line.startswith(prefix):\n        return line[len(prefix):]\n    else:\n        return \"\"\n","pxt.json":"{\n    \"name\": \"To the seriel\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1753106004594,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"9)iJD!3#Db2|rl29](ch\">parts</variable><variable id=\"d4bEZKjSa=j?Z3)A+=%X\">line</variable></variables><block type=\"device_button_event\" x=\"183\" y=\"-45\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">B</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"455\" y=\"-32\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"></block></statement></block><block type=\"device_button_event\" x=\"741\" y=\"-32\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A+B</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"-36\" y=\"141\"></block><block type=\"input_logo_event\" x=\"169\" y=\"141\"><field name=\"action\">TouchButtonEvent.LongPressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logolongpress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"555\" y=\"141\"><field name=\"action\">TouchButtonEvent.Released</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logorelease</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"-36\" y=\"314\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logopress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"315\" y=\"314\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logotouch</field></shadow></value></block></statement></block></xml>","main.ts":"","README.md":"","main.py":"def on_logo_long_pressed():\n    serial.write_line(\"logolongpress\")\ninput.on_logo_event(TouchButtonEvent.LONG_PRESSED, on_logo_long_pressed)\n\ndef on_button_pressed_a():\n    serial.write_line(\"A\")\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_ab():\n    serial.write_line(\"A+B\")\ninput.on_button_pressed(Button.AB, on_button_pressed_ab)\n\ndef on_button_pressed_b():\n    serial.write_line(\"B\")\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_logo_touched():\n    serial.write_line(\"logotouch\")\ninput.on_logo_event(TouchButtonEvent.TOUCHED, on_logo_touched)\n\ndef on_logo_pressed():\n    serial.write_line(\"logopress\")\ninput.on_logo_event(TouchButtonEvent.PRESSED, on_logo_pressed)\n\ndef on_logo_released():\n    serial.write_line(\"logorelease\")\ninput.on_logo_event(TouchButtonEvent.RELEASED, on_logo_released)\n\ndef on_data_received():\n    line = serial.read_until(serial.delimiters(Delimiters.CARRIAGE_RETURN)).strip()\n    parts = line.split(\" \")\n\n    if parts[0] == \"PLOT\" and len(parts) == 3:\n        try:\n            x = int(parts[1])\n            y = int(parts[2])\n            if 0 <= x <= 4 and 0 <= y <= 4:\n                led.plot(x, y)\n                # no debug message on success\n            else:\n                serial.write_line(f\"Error: Coordinates out of range ({x},{y})\")\n                control.reset()\n        except:\n            serial.write_line(\"Error: Invalid number format in PLOT command\")\n            control.reset()\n\n    elif parts[0] == \"CLEAR\" and len(parts) == 1:\n        basic.clear_screen()\n\n    elif parts[0] == \"TEXT\" and len(parts) >= 2:\n        basic.clear_screen()\n        basic.show_string(extract_text(line))\n\n    else:\n        serial.write_line(f\"Error: Unknown or malformed command: '{line}'\")\n        control.reset()\n\nserial.on_data_received(serial.delimiters(Delimiters.NEW_LINE), on_data_received)\n\nbasic.clear_screen()\n\ndef on_forever():\n    basic.pause(1000)\n    serial.write_value(\"temp\", input.temperature())\n\nbasic.forever(on_forever)\n\ndef extract_text(line: str) -> str:\n    prefix = \"TEXT \"\n    if line.startswith(prefix):\n        return line[len(prefix):]\n    else:\n        return \"\"\n","pxt.json":"{\n    \"name\": \"To the seriel\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1753127632998,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"9)iJD!3#Db2|rl29](ch\">parts</variable><variable id=\"d4bEZKjSa=j?Z3)A+=%X\">line</variable></variables><block type=\"device_button_event\" x=\"183\" y=\"-45\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">B</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"455\" y=\"-32\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"></block></statement></block><block type=\"device_button_event\" x=\"741\" y=\"-32\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A+B</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"-36\" y=\"141\"></block><block type=\"input_logo_event\" x=\"169\" y=\"141\"><field name=\"action\">TouchButtonEvent.LongPressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logolongpress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"555\" y=\"141\"><field name=\"action\">TouchButtonEvent.Released</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logorelease</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"-36\" y=\"314\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logopress</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"315\" y=\"314\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">logotouch</field></shadow></value></block></statement></block></xml>","main.ts":"input.onLogoEvent(TouchButtonEvent.LongPressed, function on_logo_long_pressed() {\n    serial.writeLine(\"logolongpress\")\n})\ninput.onButtonPressed(Button.A, function on_button_pressed_a() {\n    serial.writeLine(\"A\")\n})\ninput.onButtonPressed(Button.AB, function on_button_pressed_ab() {\n    serial.writeLine(\"A+B\")\n})\ninput.onButtonPressed(Button.B, function on_button_pressed_b() {\n    serial.writeLine(\"B\")\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function on_logo_touched() {\n    serial.writeLine(\"logotouch\")\n})\ninput.onLogoEvent(TouchButtonEvent.Pressed, function on_logo_pressed() {\n    serial.writeLine(\"logopress\")\n})\ninput.onLogoEvent(TouchButtonEvent.Released, function on_logo_released() {\n    serial.writeLine(\"logorelease\")\n})\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function on_data_received() {\n    let x: number;\n    let y: number;\n    let line = _py.py_string_strip(serial.readUntil(serial.delimiters(Delimiters.CarriageReturn)))\n    let parts = _py.py_string_split(line, \" \")\n    if (parts[0] == \"PLOT\" && parts.length == 3) {\n        try {\n            x = parseInt(parts[1])\n            y = parseInt(parts[2])\n            if (0 <= x && x <= 4 && (0 <= y && y <= 4)) {\n                led.plot(x, y)\n            } else {\n                //  no debug message on success\n                serial.writeLine(\"Error: Coordinates out of range ({x},{y})\")\n                control.reset()\n            }\n            \n        }\n        catch (_) {\n            serial.writeLine(\"Error: Invalid number format in PLOT command\")\n            control.reset()\n        }\n        \n    } else if (parts[0] == \"CLEAR\" && parts.length == 1) {\n        basic.clearScreen()\n    } else if (parts[0] == \"TONE\" && parts.length >= 2) {\n        music.play(music.tonePlayable(Note[parts[1]], music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n    } else {\n        serial.writeLine(\"Error: Unknown or malformed command: '{line}'\")\n        control.reset()\n    }\n    \n})\nbasic.clearScreen()\nbasic.forever(function on_forever() {\n    basic.pause(1000)\n    serial.writeValue(\"temp\", input.temperature())\n})\nfunction extract_text(line: string): string {\n    let prefix = \"TEXT \"\n    if (_py.py_string_startswith(line, prefix)) {\n        return line.slice(prefix.length)\n    } else {\n        return \"\"\n    }\n    \n}\n\n","README.md":"","main.py":"def on_logo_long_pressed():\n    serial.write_line(\"logolongpress\")\ninput.on_logo_event(TouchButtonEvent.LONG_PRESSED, on_logo_long_pressed)\n\ndef on_button_pressed_a():\n    serial.write_line(\"A\")\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_ab():\n    serial.write_line(\"A+B\")\ninput.on_button_pressed(Button.AB, on_button_pressed_ab)\n\ndef on_button_pressed_b():\n    serial.write_line(\"B\")\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_logo_touched():\n    serial.write_line(\"logotouch\")\ninput.on_logo_event(TouchButtonEvent.TOUCHED, on_logo_touched)\n\ndef on_logo_pressed():\n    serial.write_line(\"logopress\")\ninput.on_logo_event(TouchButtonEvent.PRESSED, on_logo_pressed)\n\ndef on_logo_released():\n    serial.write_line(\"logorelease\")\ninput.on_logo_event(TouchButtonEvent.RELEASED, on_logo_released)\n\ndef on_data_received():\n    line = serial.read_until(serial.delimiters(Delimiters.CARRIAGE_RETURN)).strip()\n    parts = line.split(\" \")\n\n    if parts[0] == \"PLOT\" and len(parts) == 3:\n        try:\n            x = int(parts[1])\n            y = int(parts[2])\n            if 0 <= x <= 4 and 0 <= y <= 4:\n                led.plot(x, y)\n                # no debug message on success\n            else:\n                serial.write_line(f\"Error: Coordinates out of range ({x},{y})\")\n                control.reset()\n        except:\n            serial.write_line(\"Error: Invalid number format in PLOT command\")\n            control.reset()\n\n    elif parts[0] == \"CLEAR\" and len(parts) == 1:\n        basic.clear_screen()\n\n    elif parts[0] == \"TEXT\" and len(parts) >= 2:\n        music.play(music.tone_playable(Note.D, music.beat(BeatFraction.WHOLE)), music.PlaybackMode.UNTIL_DONE)\n\n    else:\n        serial.write_line(f\"Error: Unknown or malformed command: '{line}'\")\n        control.reset()\n\nserial.on_data_received(serial.delimiters(Delimiters.NEW_LINE), on_data_received)\n\nbasic.clear_screen()\n\ndef on_forever():\n    basic.pause(1000)\n    serial.write_value(\"temp\", input.temperature())\n\nbasic.forever(on_forever)\n\ndef extract_text(line: str) -> str:\n    prefix = \"TEXT \"\n    if line.startswith(prefix):\n        return line[len(prefix):]\n    else:\n        return \"\"\n","pxt.json":"{\n    \"name\": \"To the seriel\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1753127906886}